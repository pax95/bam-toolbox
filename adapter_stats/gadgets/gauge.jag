<%
	var adapter = request.getParameter('adapter');
	var time = request.getParameter('t');
	//var results;
	var _minSize = null;
	var _maxSize = null;
	var _avgSize = null;
	var __minSize = "min_size";
	var __maxSize = "max_size";
	var __avgSize = "avg_size";

	var dataTable = null;

	var timeBetweenQuery;
	 
	function getCurrentDay(t){
		var date;
		var currentDate = new Date();
		var h= currentDate.getHours();
		var m= currentDate.getMinutes();
		var s= currentDate.getSeconds();
		var d = currentDate.getDate();
		var M = currentDate.getMonth()+1;
		var y = currentDate.getFullYear(); 
		h = formatTimeChunk(h);
		m = formatTimeChunk(m);
		s = formatTimeChunk(s);	
		d = formatTimeChunk(d);	
		M = formatTimeChunk(M);
		if(t=="year"){
			date = y+"-"+M;
			}
		else if(t=="month"){
			date = y+"-"+M+"-"+d;		
		}
		else{
			date = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		return date;
	};
	function setFromdate(t){
		var _fromDate;
		var date = new Date();
		if(t=="year"){
			date.setMonth(date.getMonth()-60);//60months backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M;
		}
		else if(t=="month"){
			date.setDate(date.getDate()-30);//30days backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d;
		}
		else if(t=="day"){
			date.setHours(date.getHours()-24);//24hours backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();
			h = formatTimeChunk(h);
			m = formatTimeChunk(m);
			s = formatTimeChunk(s);	
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		else{
			date.setMinutes(date.getMinutes()-60);//60min
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();
			h = formatTimeChunk(h);
			m = formatTimeChunk(m);
			s = formatTimeChunk(s);	
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		return _fromDate;
	};

	if(time){
		if(time.toLowerCase() == "now"){
			dataTable = "ADAPTER_STATS_SUMMARY_PER_HOUR";
			var toDate = getCurrentDay("now");
			var fromDate = setFromdate("now");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else if(time.toLowerCase() == "day"){
			dataTable = "ADAPTER_STATS_SUMMARY_PER_DAY";
			var toDate = getCurrentDay("day");
			var fromDate = setFromdate("day");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else if(time.toLowerCase() == "month"){
			dataTable = "ADAPTER_STATS_SUMMARY_PER_DAY";
			var toDate = getCurrentDay("month");
			var fromDate = setFromdate("month");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else if(time.toLowerCase() == "all"){
			dataTable = "ADAPTER_STATS_SUMMARY_PER_MONTH";
			var toDate = getCurrentDay("year");
			var fromDate = setFromdate("year");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else{
			new Log().info("cannot select table");
		}
	}
	if(dataTable){
		if(adapter!=undefined && adapter!="" && adapter!=null){
			queryAdapter();
		}
		else{
			queryAllAdapters();
		}
	}
	//require("dashboardUtils.jag");
	function QueryResults(q){
		var db = new Database("jdbc:mysql://localhost:3306/bam4", "bam", "bam");
		var result;
		try{
			result = db.query(q);						
		}
		catch(e){
			print("<span style='position:absolute;top:10px;color:#0E0E0E;font-weight:100;font-size:14px;'>No data available. Please visit our <a href='http://docs.wso2.org/wiki/display/BAM200/Service+Statistics+Toolbox' target='_blank' style='color:#1285FF;text-decoration:underline;'>docs</a> to see how to configure AS monitoring</span><br /><span style='position:absolute;top:30px;color:#555;font-size:11px;'> <b>Reason : </b>" + e +"</span>");
		}
		finally{
			db.close();
		}
		return result;
	}
	function queryAllAdapters(){
			_minSize = null;
	        _maxSize = null;
	        _avgSize = null;
	    		
			var query = "select min(min_size) as min_size,max(max_size) as max_size,avg(avg_size) as avg_size from "+dataTable+" where " + timeBetweenQuery + "";
			var result = QueryResults(query);
			if(result){
				if(result[0][__minSize]){
					_minSize = result[0][__minSize];
					_maxSize = result[0][__maxSize];
					_avgSize = result[0][__avgSize];
				}
				else{
					_minSize = result[0][__minSize];
					_maxSize = result[0][__maxSize];
					_avgSize = result[0][__avgSize];
				}
			}		
	};
	function queryAdapter(){
			_minSize = null;
	        _maxSize = null;
	        _avgSize = null;
	    	var query = "select min(min_size) as min_size,max(max_size) as max_size,avg(avg_size) as avg_size from "+dataTable+" where " + timeBetweenQuery + " and adapter='"+adapter+"'";
			var result = QueryResults(query);
			if(result){
				if(result[0][__minSize]){
					_minSize = result[0][__minSize];
					_maxSize = result[0][__maxSize];
					_avgSize = result[0][__avgSize];
				}
				else{
					_minSize = result[0][__minSize];
					_maxSize = result[0][__maxSize];
					_avgSize = result[0][__avgSize];			
				}
			}
	};
	function formatTimeChunk(t){
		if (t<10){
  			t="0" + t;
		}
		return t;
	}
%>
<html>
<head>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="../jqPlot/jquery.jqplot.min.css" />
<link rel="stylesheet" type="text/css" href="../bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" type="text/css" href="../bootstrap/css/bootstrap-responsive.min.css" />
<style>
.gauge-dd-btns{
float: right;
}
#gauge-dd-wrapper{
	padding:6px;
}
body{
font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
}
</style>
</head>
<body>
<% 
if(_minSize){
	%>
	<div id="gauge-dd-wrapper"><span id="gaugeValInfo" class="label label-info">Current value in gauge is <span id="gaugeVal"></span> bytes</span><div id="gauge-dd" class="btn-group gauge-dd-btns">
            <button value="<%=_minSize%>" class="btn btn-small">min</button>
            <button value="<%=_avgSize%>" class="btn btn-small btn-primary">avg</button>
            <button value="<%=_maxSize%>" class="btn btn-small">max</button>
</div></div>
<div id="jqPlot-gauge" style="margin-top: 20px; margin-left: 20px; width: 460px; height: 300px; position: relative;"></div>
<%
}
%>

<script type="text/javascript" src="../scripts/jquery-1.7.2.min.js"></script>
<script type="text/javascript" src="../jqPlot/jquery.jqplot.min.js"></script>
<script type="text/javascript" src="../jqPlot/plugins/jqplot.meterGaugeRenderer.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../jqPlot/excanvas.min.js"></script>
<![endif]-->
<script type="text/javascript">
$(document).ready(function(){
   var minSize = <%=_minSize%>;
   var maxSize = <%=_maxSize%>;
   var avgSize = <%=_avgSize%>;
	if(avgSize){
	$("#gaugeVal").text(""+avgSize.toFixed(3)+"");
	}
   var meterGauge = $.jqplot('jqPlot-gauge',[[avgSize]],{
       seriesDefaults: {
           renderer: $.jqplot.MeterGaugeRenderer,
           rendererOptions: {
               label: 'Message size',
				min: getMin(minSize),
               	max: getMax(maxSize)
           }
       }
   });
   $("#gauge-dd button").click(function(){
        $("#gauge-dd button").removeClass('btn-primary');
        $(this).addClass('btn-primary');
        var btnValue = $(this).attr("value");
        setPlot(btnValue);
    });
   function setPlot(v){
	meterGauge.series[0].data = [[1,v]];
	meterGauge.replot();
	if(v!=0){
	v = parseFloat(v).toFixed(3);
	}else{v = "less than 0.001";}	
	$("#gaugeVal").text(v);
   };
	function getMin(num){
		return Math.round(num/2);	
	};
	function getMax(num){
		return Math.round((num*10)/9);
	};

});
</script>



<!-- End additional plugins -->
</body>
</html>
